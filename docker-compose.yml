# Docker Compose configuration for Stock Sentiment Analyzer
version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET:-production}
    container_name: stock-sentiment-backend
    restart: unless-stopped
    ports:
      - \"5000:5000\"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDDIT_USER_AGENT=${REDDIT_USER_AGENT}
    volumes:
      - backend_logs:/app/logs
      - backend_cache:/app/cache
    networks:
      - stock-sentiment-network
    healthcheck:
      test: [\"CMD\", \"python\", \"-c\", \"import requests; requests.get('http://localhost:5000/api/health')\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET:-runner}
    container_name: stock-sentiment-frontend
    restart: unless-stopped
    ports:
      - \"3000:3000\"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost:5000}
    networks:
      - stock-sentiment-network
    healthcheck:
      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - backend

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: stock-sentiment-redis
    restart: unless-stopped
    ports:
      - \"6379:6379\"
    volumes:
      - redis_data:/data
    networks:
      - stock-sentiment-network
    healthcheck:
      test: [\"CMD\", \"redis-cli\", \"ping\"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: stock-sentiment-nginx
    restart: unless-stopped
    ports:
      - \"80:80\"
      - \"443:443\"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - stock-sentiment-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: stock-sentiment-prometheus
    restart: unless-stopped
    ports:
      - \"9090:9090\"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - stock-sentiment-network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: stock-sentiment-grafana
    restart: unless-stopped
    ports:
      - \"3001:3000\"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - stock-sentiment-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  backend_logs:
    driver: local
  backend_cache:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  stock-sentiment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16