name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Testing
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd \"redis-cli ping\"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
    
    - name: Run linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        cd backend
        mypy . --ignore-missing-imports
    
    - name: Run tests with coverage
      env:
        FLASK_ENV: testing
        MOCK_DATA_ENABLED: true
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd backend
        python -m pytest --cov=. --cov-report=xml --cov-report=term -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true

  # Frontend Testing
  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check
    
    - name: Run tests with coverage
      run: |
        cd frontend
        npm run test:ci
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/.next
        retention-days: 1

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Backend dependency check
      run: |
        cd backend
        pip install safety
        safety check --json
    
    - name: Frontend dependency check
      run: |
        cd frontend
        npm audit --audit-level moderate

  # Docker Build and Push
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.stocksentiment.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      env:
        DEPLOY_HOST: ${{ secrets.STAGING_HOST }}
        DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        DOCKER_REGISTRY: ${{ env.REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo \"$DEPLOY_KEY\" > deploy_key
        chmod 600 deploy_key
        
        ssh -i deploy_key -o StrictHostKeyChecking=no deploy@$DEPLOY_HOST << EOF
          cd /opt/stock-sentiment-analyzer
          
          # Pull latest images
          docker pull $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}-backend:$IMAGE_TAG
          docker pull $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG
          
          # Update docker-compose with new image tags
          sed -i \"s|image:.*backend.*|image: $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}-backend:$IMAGE_TAG|g\" docker-compose.prod.yml
          sed -i \"s|image:.*frontend.*|image: $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG|g\" docker-compose.prod.yml
          
          # Deploy with zero downtime
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
        EOF
        
        rm deploy_key
    
    - name: Run staging health checks
      run: |
        sleep 30
        curl -f https://staging.stocksentiment.example.com/api/health
        curl -f https://staging.stocksentiment.example.com/

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://stocksentiment.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      env:
        DEPLOY_HOST: ${{ secrets.PRODUCTION_HOST }}
        DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
        DOCKER_REGISTRY: ${{ env.REGISTRY }}
        IMAGE_TAG: ${{ github.event.release.tag_name }}
      run: |
        echo \"$DEPLOY_KEY\" > deploy_key
        chmod 600 deploy_key
        
        ssh -i deploy_key -o StrictHostKeyChecking=no deploy@$DEPLOY_HOST << EOF
          cd /opt/stock-sentiment-analyzer
          
          # Create backup
          docker-compose -f docker-compose.prod.yml down
          tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz .
          
          # Pull latest images
          docker pull $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}-backend:$IMAGE_TAG
          docker pull $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG
          
          # Update docker-compose with new image tags
          sed -i \"s|image:.*backend.*|image: $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}-backend:$IMAGE_TAG|g\" docker-compose.prod.yml
          sed -i \"s|image:.*frontend.*|image: $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG|g\" docker-compose.prod.yml
          
          # Deploy
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
        EOF
        
        rm deploy_key
    
    - name: Run production health checks
      run: |
        sleep 60
        curl -f https://stocksentiment.example.com/api/health
        curl -f https://stocksentiment.example.com/
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: \"✅ Production deployment successful: ${{ github.event.release.tag_name }}\"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
    
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: \"❌ Production deployment failed: ${{ github.event.release.tag_name }}\"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://staging.stocksentiment.example.com
        uploadDir: './lighthouse-results'
        temporaryPublicStorage: true
    
    - name: Run k6 load tests
      uses: grafana/k6-action@v0.3.0
      with:
        filename: tests/load-test.js
      env:
        BASE_URL: https://staging.stocksentiment.example.com

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Clean up old container images
      run: |
        # Clean up old GitHub Container Registry images
        # This would be implemented based on your retention policy
        echo \"Cleaning up old images...\"
        # Implementation would go here